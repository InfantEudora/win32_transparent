#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//These are set with glBindImageTexture
layout(rgba8, binding = 0) uniform image2D imgIn;
layout(rgba8, binding = 1) uniform image2D imgOut;

vec4 checker_pattern(ivec2 pixel);
vec4 fast_voronoi(ivec2 pixel);
vec4 actual_voronoi(ivec2 pixel);

uniform int pattern = 0;

//This reads the texture in, and outputs to the texture out.
void main(){
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    //We don't really need to read the input
    vec4 invalue = imageLoad(imgIn,texelCoord);

    vec4 outval;
    if (pattern == 0){
        outval = checker_pattern(texelCoord);
    }else{
        outval = actual_voronoi(texelCoord);
    }

    imageStore(imgOut, texelCoord, outval);
}

vec4 checker_pattern(ivec2 pixel){
    int x = pixel.x;
    int y = pixel.y;
    int c = int(int((x & 0x10) == 0) ^ int((y & 0x10) == 0));

    float a = 1.0  - (0.2 * float(c));

    vec4 o = vec4(c,c,c,a);
    return o;
}

//From https://www.shadertoy.com/view/MdKXDD
vec4 fast_voronoi(ivec2 pixel){
    vec4 o;
    vec2 p = vec2(pixel);
    p = p/50.0f;
    o = min(o, length(fract(p *= mat2(7, -5, 5, 7)*.1) - .5)/.5);
    o = min(o, length(fract(p *= mat2(7, -5, 5, 7)*.1) - .5)/.5);
    o = min(o, length(fract(p *= mat2(7, -5, 5, 7)*.1) - .5)/.5);
    return o;
}

//Actual voronoi from IQ: https://www.shadertoy.com/view/MslGD8
vec2 hashwithoutsine22(vec2 p){
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);
}

vec2 hash(vec2 p){
    p = vec2(dot(p,vec2(127.1,311.7)),
             dot(p,vec2(269.5,183.3)));
    return fract(sin(p)*18.5453);
}

//Returns distance, and cell id
vec2 voronoi(in vec2 x){
    vec2 n = floor(x);
    vec2 f = fract(x);
	vec3 m = vec3(2.0);
    for(int j=-1; j<=1; j++){
        for(int i=-1; i<=1; i++){
            vec2  g = vec2(float(i), float(j));
            vec2  o = hash(n + g);
            vec2  r = g - f + o;
            float d = dot(r, r);
            if(d < m.x){
                m = vec3(d, o);
            }
        }
    }
    return vec2( sqrt(m.x), m.y+m.z );
}

vec4 actual_voronoi(ivec2 pixel){
    vec2 p = vec2(pixel) / 16.0;
    vec2 c = voronoi(p);

    vec3 col;
    float cl = clamp(c.y/2.0,0.0,1.0);
    col = vec3(cl);

    float a = 1.0  - (0.2 * float(cl));
    return vec4(col, a);
}